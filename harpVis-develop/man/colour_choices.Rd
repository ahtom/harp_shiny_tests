% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colour_choices.R
\name{colour_choicesUI}
\alias{colour_choicesUI}
\alias{colour_choices}
\title{Shiny module for picking colours}
\usage{
colour_choicesUI(id)

colour_choices(input, output, session, verif_data)
}
\arguments{
\item{id}{An ID string for the module's UI}

\item{input}{input reactive}

\item{output}{output reactive}

\item{session}{Session from which to make a child scope (the default should
almost always be used).}

\item{verif_data}{verification data as a reactive value}
}
\value{
A reactive data frame to be used as input to the \code{colour_table}
argument in \code{\link{plot_point_verif}}.
}
\description{
The UI includes a button with a palette icon for opening a modal to pick
colours for a plot. The output is a data frame that can be used to control
colours in plotting point verification scores using the
\code{\link{plot_point_verif}} function.
}
\details{
Note that the module uses the "old" semantics for shiny modules so should be
called with \code{\link[shiny]{callModule}} rather than
\code{\link[shiny]{moduleServer}}.
}
\examples{
library(shiny)

ui <- fluidPage(
  colour_choicesUI("cols"),
  plotOutput("verifPlot")
)

server <- function(input, output, session) {
  col_table <- callModule(colour_choices, "cols", reactive(verif_data_ens))
  output$verifPlot <- renderPlot({
    plot_point_verif(
      verif_data_ens, spread, colour_table = col_table(),
      plot_num_cases = FALSE
    )
  })
}

if (interactive()) {
  shinyApp(ui, server)
}


}
